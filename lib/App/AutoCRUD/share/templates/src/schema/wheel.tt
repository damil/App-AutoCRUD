[%~ WRAPPER linked_style %][% base %]static/css/ashbury-d3.css[% END ~%]
[%~ WRAPPER linked_script %][% base %]static/js/d3.js[% END ~%]


[%# ---------- start body ---------- %]

<style>
  body {
  font: 10px sans-serif;
}


.grp-label {
  font-size: 10px;
  font: sans-serif;
  text-anchor: middle;
}



.svg-container {
    display: inline-block;
    position: relative;
    width: 100%;
    padding-bottom: 100%; // aspect ratio 
  vertical-align: top;
    overflow: hidden;
}
.svg-content-responsive {
    display: inline-block;
    position: absolute;
    top: 10px;
}


</style>


<div id="wheel" data-json-url="./wheel.json"></div>


<script type="text/javascript">

/* 

   TODO
   - handle for scaling or make responsive to window size
   - table groups : add arcs for tgroups
   - click on table : display full list of columns + hyperlink on search form
   - min size for tables without chords
   - after rotate, compute text direction 

    DOC : http://devdocs.io/d3~4

   inspired by "Schema Ball" http://mkweb.bcgsc.ca/schemaball/



*/



var rotate = 0;
var div;
var m0;
var svg;


//----------------------------------------------------------------------------



// see https://bl.ocks.org/mbostock/4062006
// https://bl.ocks.org/mbostock/1046712



var jsonURL = d3.select("#wheel").attr("data-json-url");
d3.json(jsonURL, build_wheel);



function build_wheel(data) {

  if (!data.nodes.length) {
    d3.select("#wheel").html("<p class='lead nodata'>No Data Available</p>");
    return;
  }

  // dimensions
  var margin = {left:10, top:10, right:10, bottom:10},
      outerSize = 700,
      width =  outerSize - margin.left - margin.right,
        // more flexibility: Math.min(window.innerWidth, 1000)
      height =  outerSize - margin.top - margin.bottom,
        // same: Math.min(window.innerWidth, 1000)
      innerRadius = Math.min(width, height) * .39,
      outerRadius = innerRadius * 1.1,
      opacityDefault = 0.7;


  // create scale and layout functions
  var color = d3.scaleOrdinal(d3.schemeCategory20);
  var chord = d3.chord()
    .padAngle(0.03)
  //    .sortChords(d3.descending)
  ;
  var arc = d3.arc()
    .innerRadius(innerRadius*1.01)
    .outerRadius(outerRadius);
  var ribbon = d3.ribbon()
    .radius(innerRadius);



  // create SVG
  div = d3.select("#wheel");

    // lines below make responsive ... but then rotation no longer works :-(
    // .append("div")
    // .classed("svg-container", true); //container class to make it responsive


  svg = div.append("svg")
    .attr("width", width)
    .attr("height", height)

    // lines below add zoom support .. but it conflicts with rotation
 //   .call(d3.zoom().on("zoom", function () {
 //    svg.attr("transform", d3.event.transform)
 // }))
;

   // // see http://thenewcode.com/744/Make-SVG-Responsive
   // //responsive SVG needs these 2 attributes and no width and height attr
   // .attr("preserveAspectRatio", "xMinYMin meet")
   // .attr("viewBox", "0 0 1000 1000") // bigger numbers make a smaller svg
   // //class to make it responsive
   // .classed("svg-content-responsive", true); 


  var g = svg.append("g")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
    .datum(chord(data.matrix));

  // draw outer arcs
  var outerArcs = g.selectAll("g.group")
    .data(function(chords) { return chords.groups; })
    .enter().append("g")
    .attr("class", "group")
    .on("mouseover", fade(svg, .1))
    .on("mouseout", fade(svg, opacityDefault))
    .on("click", function(d, i) {window.open("../table/"+data.nodes[d.index]+"/descr");})
    ;


  outerArcs.append("path")
    .style("fill", function(d) { return color(d.index); })
    .style("stroke", function(d) { return d3.rgb(color(d.index)).darker(); })
    .attr("d", arc);


  // title attribute
  outerArcs.append("title").text(function(d) {
    return data.nodes[d.index]; // nom de la table 
    });

      
  outerArcs.append("text")
    .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
    .attr("dy", ".35em")
    .attr("class", "titles")
    .attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
    .attr("transform", function(d) {
      return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
      + "translate(" + (outerRadius + 10) + ")"
      + (d.angle > Math.PI ? "rotate(180)" : "");
    })
    .text(function(d,i) { return data.nodes[i]; });




  //Draw the ribbons that go from group to group
  var ribbons =  g.append("g")
    .attr("class", "ribbons")
    .selectAll("path")
    .data(function(chords) { return chords; })
    .enter().append("path")
      .attr("class", "chord")
      .attr("d", ribbon)
      .style("opacity", opacityDefault)
      .style("fill", function(d) { return color(d.target.index); })
      .style("stroke", function(d) { return d3.rgb(color(d.target.index)).darker(); });


  // tooltip pour chaque ruban
  ribbons.append("title").
    text(function(d){
//      return data.nodes[d.source.index] + " => " + data.nodes[d.target.index];
      return data.rel_descr[d.source.index][d.target.index] || "no descr";
    });


    d3.select(window)
        .on("mousedown", function(d) { mousedown(svg, outerRadius); } )
        .on("mousemove", function(d) { mousemove(svg, outerRadius); } )
        .on("mouseup",   function(d) { mouseup(svg, outerRadius); } );


}





//----------------------------------------------------------------------------
//Returns an event handler for fading a given chord group.
function fade(svg, opacity) {
  return function(d,i) {
    svg.selectAll("path.chord")
        .filter(function(d) { return d.source.index != i && d.target.index != i; })
    .transition()
        .style("opacity", opacity);
  };
}



//----------------------------------------------------------------------------

function mousedown(svg, r) {

    m0 = mouse(d3.event, r, r);
    d3.event.preventDefault();
}

//----------------------------------------------------------------------------

function mousemove(svg, r) {

    if (! m0) return;

    var m1 = mouse(d3.event, r, r);
    rotate += Math.atan2(cross(m0, m1), dot(m0, m1)) * 180 / Math.PI;

    if (rotate > 360) rotate -= 360;
    else if (rotate < 0) rotate += 360;

   svg.attr("transform", "rotate(" + rotate + ")");

    m0 = m1;
}

//----------------------------------------------------------------------------

function mouseup(svg, rx, ry) {

    m0 = null;

    svg.selectAll("g.node text")
        .attr("dx", function(d) { return (d.x + rotate) % 360 < 180 ? 8 : -8; })
        .attr("text-anchor", function(d) { return (d.x + rotate) % 360 < 180 ? "start" : "end"; })
        .attr("transform", function(d) { return (d.x + rotate) % 360 < 180 ? null : "rotate(180)"; });

    return true;
}

//----------------------------------------------------------------------------

function cross(a, b) {

    return a[0] * b[1] - a[1] * b[0];
}

//----------------------------------------------------------------------------

function dot(a, b) {

    return a[0] * b[0] + a[1] * b[1];
}

//----------------------------------------------------------------------------

function mouse(e, rx, ry) {

  var containerRect =  div.node().getBoundingClientRect();
    var xOffset = containerRect.left + window.scrollX;
    var yOffset = containerRect.top  + window.scrollY;

    return [e.pageX - rx - xOffset, e.pageY - ry - yOffset];


}

//----------------------------------------------------------------------------

function updateNodes(svg, name, value) {

    return function(d) {
        if (value) this.parentNode.appendChild(this);
            svg.select("#node-" + d[name].key).classed(name, value);
    };
}

/* TIPS


https://coderwall.com/p/psogia/simplest-way-to-add-zoom-pan-on-d3-js

var svg = d3.select("body")
 .append("svg")
 .attr("width", "100%")
 .attr("height", "100%")
 .call(d3.zoom().on("zoom", function () {
    svg.attr("transform", d3.event.transform)
 }))
 .append("g")

*/



</script>
